@model IEnumerable<GoGreenV3.Models.MarkerModel>

@{ ViewBag.Title = "Monitor"; }
<script src="~/Scripts/jquery-3.1.1.js"></script>
<script src="~/Scripts/gmaps-monitor.js"></script>
<script src="https://www.gstatic.com/firebasejs/3.5.3/firebase.js"></script>
<script src="~/Scripts/firebase-config.js"></script>

<script>
    database = firebase.database().ref();

    function loaded() {
        window.onload = function () {
            readFirebase();
            firebaseEvents();
            initMap();

            // Delay the start of showing the markers on map. Async issues.
            setTimeout(function() {
                try {
                    document.getElementById("loading").classList.remove("alert-info");
                    document.getElementById("loading").classList.add("alert-success");
                    document.getElementById("loading-head").innerHTML = "Load complete";
                    document.getElementById("loading-text").innerHTML = "";
                    $("#loading").fadeTo(3000, 500).slideUp(500, function(){
                        $("#loading").slideUp(500);
                    });
                } catch(error) {

                }

                randomizeLight();
            }, 3000);
        }
    }
</script>

<script>
    function readFirebase() {
        console.log("Read Firebase");

        database.child("markers").once("value", function(snapshot) {
            for (var n = 0; n < monitor.length; n++) {
                snapshot.ref.child(monitor[n][1]).once("value", function(mSnapshot) {
                    var mss = mSnapshot.val();

                    monitor[n][3] = mss.altered;
                });
            }
        });
    }

    function firebaseEvents() {
        console.log("Firebase Events");

        database.child("markers").on("child_changed", function(snapshot) {
            var key = snapshot.key;
            var ss = snapshot.val();
            var i = ss.index;

            monitor[i][2] = ss.light;
            monitor[i][3] = ss.altered;

            var ic = { url: "/Images/" + ss.light + ".png" }

            markers[i] = null;
            markers[i] = new google.maps.Marker({
                id: monitor[i][1],
                map: map,
                position: { lat: pos[i][2], lng: pos[i][3] },
                icon: ic
            });

            setInfoWindow(i);

            snapshot.ref.child(key + "/altered").once("child_changed", function() {
                $.ajax({
                    type: "POST",
                    url: "https://localhost:44300/api/arapi",
                    //url: "https://172.16.4.67:44300/api/arapi",
                    data: { date: "11/11/2016", time: "12:00:00 AM", latitude: 16.123, longitude: 120.456, location: "Baguio City" },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                });
            });
        });
    }

    function initMap() {
        console.log("Google Maps");

        map = new google.maps.Map(document.getElementById('map-monitor'), {
            zoom: 17,
            center: { lat: 16.4023, lng: 120.5960 }
        });
        
        infowindow = new google.maps.InfoWindow();
    }

    function randomizeLight() {
        console.log("Randomize Light");

        var rng;
        var color, icon;

        for (var n = 0; n < monitor.length; n++) {
            if (monitor[n][3]) {
                color = "green";
                icon = { url: "/Images/altered.png" }
            }
            else {
                rng = Math.floor((Math.random() * 2) + 1);
                color = getRandomColor(rng);
                icon = { url: "/Images/" + color + ".png" }
            }

            markers[n] = new google.maps.Marker({
                map: map,
                position: { lat: pos[n][2], lng: pos[n][3] },
                icon: icon
            });

            monitor[n][2] = color;

            database.child("markers/" + monitor[n][1]).update({
                light: color
            });

            setInfoWindow(n);
        }

        countdown(5000);
    }

    function countdown(interval) {
        console.log("Countdown " + ctr3());

        var cd = setInterval(function() {
            var color, icon;

            for (var n = 0; n < monitor.length; n++) {
                if (monitor[n][3]) {
                    database.child("markers/" + monitor[n][1]).update({
                        light: "green"
                    });

                    color = getRandomColor(4);
                    icon = { url: "/Images/" + color + ".png" }
                }
                else if (monitor[n][2] == "green" && !monitor[n][3]) {
                    database.child("markers/" + monitor[n][1]).update({
                        light: "red"
                    });

                    color = getRandomColor(2);
                    icon = { url: "/Images/" + color + ".png" }
                }
                else if (monitor[n][2] == "red" && !monitor[n][3]) {
                    database.child("markers/" + monitor[n][1]).update({
                        light: "green"
                    });

                    color = getRandomColor(1);
                    icon = { url: "/Images/" + color + ".png" }
                }

                markers[n] = null;
                markers[n] = new google.maps.Marker({
                    id: monitor[n][1],
                    map: map,
                    position: { lat: pos[n][2], lng: pos[n][3] },
                    icon: icon
                });

                setInfoWindow(n);
            }
        }, interval);
    }
</script>

<script>
    function setInfoWindow(i) {
        if (monitor[i][3]) {
            google.maps.event.addListener(markers[i], "click", (function(marker, content, infowindow) { 
                return function() {
                    contentrelinquish = "<button id='iw-" + this.id + "' class='btn btn-default btn-small' onclick='relinquish(" + this.id + ")'>Relinquish</button>";
                    infowindow.setContent(contentrelinquish);
                    infowindow.open(map, this);
                };
            })(this, content, infowindow));
        } else {
            google.maps.event.addListener(markers[i], "click", (function(marker, content, infowindow) { 
                return function() {
                    contentalter = "<button id='iw-" + this.id + "' class='btn btn-default btn-small' onclick='alter(" + this.id + ")'>Alter</button>";
                    infowindow.setContent(contentalter);
                    infowindow.open(map, this);
                };
            })(this, content, infowindow));
        }
    }

    function getRandomColor(rng) {
        switch(rng) {
            case 1: return "green";
            case 2: return "red";
            case 3: return "yellow";
            case 4: return "altered";
        }

        return null;
    }

    function alter(id) {
        infowindow.close();

        database.child("markers/" + id).update({
            altered: true
        });
    }

    function relinquish(id) {
        infowindow.close();

        database.child("markers/" + id).update({
            altered: false
        });
    }
</script>

@foreach (var item in Model)
{
    <script>
        initArrays(
            ctr(),
            @item.Id,
            "green", false,
            @item.Latitude, @item.Longitude,
            "@item.Status", @item.IsWorking.ToString().ToLower(), @item.IsControllable.ToString().ToLower(),
            "@item.Type", "@item.Location", "@item.Description"
            );
        database.child("markers/" + @item.Id).update({
            index: ctr2()
        });
    </script>
}

<div class="row">
    <div class="col-md-3">
        <div class="col-md-12 img-rounded" style="background-color: rgb(239, 234, 234); padding: 6px 12px; margin-top: 6px; margin-bottom: 6px;">
            <h4>Traffic Light</h4>
            <div class="col-md-6 text-right">
                <strong>Total:</strong><br />
                <strong>Online:</strong><br />
                <strong>Offline:</strong><br />
                <strong>Working:</strong><br />
                <strong>Controllable:</strong><br />
            </div>
            <div class="col-md-6 text-left">
                @Model.Count()<br />
                @ViewBag.OnlineCount<br />
                @ViewBag.OfflineCount<br />
                @ViewBag.WorkingCount<br />
                @ViewBag.ControllableCount<br />
            </div>
            <div class="col-md-12">
                <img src="~/Images/green.png" />Green Light
            </div>
            <div class="col-md-12">
                <img src="~/Images/red.png" />Red Light
            </div>
            @*<div class="col-md-12">
                <img src="~/Images/yellow.png" />Yellow Light
            </div>*@
            <div class="col-md-12">
                <img src="~/Images/altered.png" />Altered (Green)
            </div>
        </div>

        <div class="col-md-12 img-rounded" style="background-color: rgb(239, 234, 234); padding: 6px 12px; margin-top: 6px; margin-bottom: 6px;">
            <h4>Rescuer</h4>
        </div>
    </div>

    <div class="col-md-9">
        <div id="loading" class="alert alert-info">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <strong id="loading-head">Loading</strong><text id="loading-text"> Please wait.</text>
        </div>
        <div id="map-monitor"></div>
    </div>

    <div class="col-md-12 img-rounded" style="background-color: rgb(239, 234, 234); padding: 6px 12px; margin-top: 6px; margin-bottom: 6px;">
        <div id="traffic-light">

        </div>
    </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyBnRjrz-o64fdMh2-qS6xK1WeKIMwcM76I&libraries=places&callback=loaded" async defer></script>